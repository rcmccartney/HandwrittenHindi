% Define a network similar to LeNet
f= 1/100;
net.layers = {};
% First convolutional layer, 5x5 filters with a bias
net.layers{end+1} = struct('type', 'conv', ...
                           'filters', f*randn(3,3,1,40, 'single'), ...
                           'biases', zeros(1, 40, 'single'), ...
                           'stride', 1, ...
                           'pad', 0) ;
net.layers{end+1} = struct('type', 'conv', ...
                           'filters', f*randn(3,3,40,100, 'single'),...
                           'biases', zeros(1,100,'single'), ...
                           'stride', 1, ...
                           'pad', 0) ;
net.layers{end+1} = struct('type', 'pool', ...
                           'method', 'max', ...
                           'pool', [2 2], ...
                           'stride', 2, ...
                           'pad', 0) ;
net.layers{end+1} = struct('type', 'conv', ...
                           'filters', f*randn(5,5,100,500, 'single'),...
                           'biases', zeros(1,500,'single'), ...
                           'stride', 1, ...
                           'pad', 0) ;
net.layers{end+1} = struct('type', 'pool', ...
                           'method', 'max', ...
                           'pool', [2 2], ...
                           'stride', 2, ...
                           'pad', 0) ;
net.layers{end+1} = struct('type', 'relu') ;
% feature maps should be 19x19 at this pt...unmmmmm
net.layers{end+1} = struct('type', 'conv', ...
                           'filters', f*randn(4,4,500,10, 'single'),...
                           'biases', zeros(1,10,'single'), ...
                           'stride', 1, ...
                           'pad', 0) ;
%net.layers{end+1} = struct('type', 'dropout', ...
%                           'rate', 0.5) ;
net.layers{end+1} = struct('type', 'softmaxloss') ;